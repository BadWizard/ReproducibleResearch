play()
play()
play()
same <- length(unique(symbols)) == 1
print(same)
same
length(unique(symbols))
symbols
symbols <- c("7","7","7")
same <- length(unique(symbols)) == 1
print(same)
all(symbols %in% c("B","BB","BBB"))
symbols
symbols <- c("B","BB","BBB")
symbols
all(symbols %in% c("B","BB","BBB"))
same <- length(unique(symbols)) == 1
print(same)
symbols
symbols
symbols <- c("7","7","BB")
symbols
symbols %in% c("B","BB","BBB")
all(bars)
bars <- symbols %in% c("B","BB","BBB")
bars <- symbols %in% c("B","BB","BBB")
all(bars)
length(unique(symbols)) == 1
payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25,
"B" = 10, "C" = 10, "0" = 0)
payouts
payout["DD"]
payouts["DD"]
unname(payouts["DD"])
symbols <- c("7","7","7")
payouts[symbols[1]]
symbols
same <-length(unique(symbols)) == 1
same
same <- symbols[1] == symbols[2] && symbols[2] == symbols[3]
same
payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25,               "B" = 10, "C" = 10, "0" = 0)    prize <-unname(payouts(symbols[1]))
payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25,               "B" = 10, "C" = 10, "0" = 0)
payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25,"B" = 10, "C" = 10, "0" = 0)
payouts <- c("DD" = 100, "7" = 80, "BBB" = 40,                "BB" = 25,"B" = 10, "C" = 10, "0" = 0)
payouts <- c("DD" = 100, "7" = 80, "BBB" = 40,                "BB" = 25, "B" = 10, "C" = 10, "0" = 0)
payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, "C" = 10, "0" = 0)
prize <-unname(payouts(symbols[1]))
payouts
prize <-unname(payouts[symbols[1]])
prize
symbols
symbols == "C"
symbols <- c("7","7","C")
symbols == "C"
symbols(symbols=="C")
symbols[symbols=="C"]
sum(symbols[symbols=="C"])
int(symbols[symbols=="C"])
integer(symbols[symbols=="C"])
tt <- integer(symbols[symbols=="C"])
tt
tt <- integer(symbols=="C")
symbols=="C"
sum(symbols=="C")
sum(symbols=="7")
cherries <- sum(symbols == "C")
cherries
2^2
2^3
diamonds <- sum(symbols == "DD")
(2^diamonds)
diamonds <- 2
(2^diamonds)
diamonds <- 3
(2^diamonds)
score <- function () {  same <-length(unique(symbols)) == 1    # or same <- symbols[1] == symbols[2] && symbols[2] == symbols[3]bars <- symbols %in% c("B","BB","BBB")if (same){  payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, "C" = 10, "0" = 0)    prize <-unname(payouts[symbols[1]])} else if(all(bars)){  prize <- 5} else{  cherries <- sum(symbols == "C")  prize <- c(0, 2, 5)[cherries + 1]}diamonds <- sum(symbols == "DD")prize <- prize * (2^diamonds)}
score <- function () {  same <-length(unique(symbols)) == 1    # or same <- symbols[1] == symbols[2] && symbols[2] == symbols[3]bars <- symbols %in% c("B","BB","BBB")if (same){  payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, "C" = 10, "0" = 0)    prize <-unname(payouts[symbols[1]])} else if(all(bars)){  prize <- 5} else{  cherries <- sum(symbols == "C")  prize <- c(0, 2, 5)[cherries + 1]}diamonds <- sum(symbols == "DD")prize <- prize * (2^diamonds)}
symbols
same <-length(unique(symbols)) == 1    # or same <- symbols[1] == symbols[2] && symbols[2] == symbols[3]bars <- symbols %in% c("B","BB","BBB")
same <-length(unique(symbols)) == 1
bars <- symbols %in% c("B","BB","BBB")
same <-length(unique(symbols)) == 1    # or same <- symbols[1] == symbols[2] && symbols[2] == symbols[3]bars <- symbols %in% c("B","BB","BBB")
same <-length(unique(symbols)) == 1# or same <- symbols[1] == symbols[2] && symbols[2] == symbols[3]bars <- symbols %in% c("B","BB","BBB")
same <-length(unique(symbols)) == 1  # or same <- symbols[1] == symbols[2] && symbols[2] == symbols[3]bars <- symbols %in% c("B","BB","BBB")
# or same <- symbols[1] == symbols[2] && symbols[2] == symbols[3]  bars <- symbols %in% c("B","BB","BBB")
same <-length(unique(symbols)) == 1  # or same <- symbols[1] == symbols[2] && symbols[2] == symbols[3]  bars <- symbols %in% c("B","BB","BBB")
same <-length(unique(symbols)) == 1
same <-length(unique(symbols)) == 1
same <-length(unique(symbols)) == 1
same <-length(unique(symbols)) == 1
same <-length(unique(symbols)) == 1
same <-length(unique(symbols)) == 1
same <-length(unique(symbols)) == 1
same <-length(unique(symbols)) == 1
same <-length(unique(symbols)) == 1  ## or same <- symbols[1] == symbols[2] && symbols[2] == symbols[3]  bars <- symbols %in% c("B","BB","BBB")
same <-length(unique(symbols)) == 1  ## or same <- symbols[1] == symbols[2] && symbols[2] == symbols[3]  bars <- symbols %in% c("B","BB","BBB")
same <-length(unique(symbols)) == 1  ## or same <- symbols[1] == symbols[2] && symbols[2] == symbols[3]  bars <- symbols %in% c("B","BB","BBB")
if (same){  payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, "C" = 10, "0" = 0)    prize <-unname(payouts[symbols[1]])}
if (same){payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, "C" = 10, "0" = 0)    prize <-unname(payouts[symbols[1]])}
score <- function () {  same <-length(unique(symbols)) == 1  ## or same <- symbols[1] == symbols[2] && symbols[2] == symbols[3]  bars <- symbols %in% c("B","BB","BBB")    if (same){    payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, "C" = 10, "0" = 0)    prize <-unname(payouts[symbols[1]])  } else if(all(bars)){    prize <- 5  } else{    cherries <- sum(symbols == "C")    prize <- c(0, 2, 5)[cherries + 1]  }    diamonds <- sum(symbols == "DD")    prize <- prize * (2^diamonds)}
score <- function () {  same <-length(unique(symbols)) == 1  ## or same <- symbols[1] == symbols[2] && symbols[2] == symbols[3]  bars <- symbols %in% c("B","BB","BBB")    if (same){    payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, "C" = 10, "0" = 0)    prize <-unname(payouts[symbols[1]])  } else if(all(bars)){    prize <- 5  } else{    cherries <- sum(symbols == "C")    prize <- c(0, 2, 5)[cherries + 1]  }    diamonds <- sum(symbols == "DD")    prize <- prize * (2^diamonds)}
same <-length(unique(symbols)) == 1  ## or same <- symbols[1] == symbols[2] && symbols[2] == symbols[3]  bars <- symbols %in% c("B","BB","BBB")
symbols <- c("7","7","7")
same <-length(unique(symbols)) == 1  ## or same <- symbols[1] == symbols[2] && symbols[2] == symbols[3]  bars <- symbols %in% c("B","BB","BBB")
payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, "C" = 10, "0" = 0)    prize <-unname(payouts[symbols[1]])
payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, "C" = 10, "0" = 0)
payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, "C" = 10, "0" = 0)    prize <-unname(payouts[symbols[1]])
score <- function () {  same <-length(unique(symbols)) == 1  ## or same <- symbols[1] == symbols[2] && symbols[2] == symbols[3]  bars <- symbols %in% c("B","BB","BBB")    if (same){    payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, "C" = 10, "0" = 0)    prize <-unname(payouts[symbols[1]])  } else if(all(bars)){    prize <- 5  } else{    cherries <- sum(symbols == "C")    prize <- c(0, 2, 5)[cherries + 1]  }    diamonds <- sum(symbols == "DD")    prize <- prize * (2^diamonds)}
payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, "C" = 10, "0" = 0)
prize <- unname(payouts[symbols[1]])
payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, "C" = 10, "0" = 0)    prize <- unname(payouts[symbols[1]])
payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, "C" = 10, "0" = 0)    prize <- unname(payouts[symbols[1]])
payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, "C" = 10, "0" = 0)
prize <- unname(payouts[symbols[1]])
payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, "C" = 10, "0" = 0)
prize <- unname(payouts[symbols[1]])
score <- function () {
same <-length(unique(symbols)) == 1  ## or same <- symbols[1] == symbols[2] && symbols[2] == symbols[3]
bars <- symbols %in% c("B","BB","BBB")
if (same){
payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, "C" = 10, "0" = 0)
prize <- unname(payouts[symbols[1]])
} else if(all(bars)){
prize <- 5
} else{
cherries <- sum(symbols == "C")
prize <- c(0, 2, 5)[cherries + 1]
}
diamonds <- sum(symbols == "DD")
prize <- prize * (2^diamonds)
}
score()
tt <- score()
tt
symbols
symbols <- c("7","7","BB")
tt <- score()
tt
symbols <- c("BB","BB","BB")
print(score())
symbols <- c("DD","DD","DD")
print(score())
symbols <- c("BBB","BBB","BBB")
print(score())
score <- function (symbols) {
same <-length(unique(symbols)) == 1  ## or same <- symbols[1] == symbols[2] && symbols[2] == symbols[3]
bars <- symbols %in% c("B","BB","BBB")
if (same){
payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, "C" = 10, "0" = 0)
prize <- unname(payouts[symbols[1]])
} else if(all(bars)){
prize <- 5
} else{
cherries <- sum(symbols == "C")
prize <- c(0, 2, 5)[cherries + 1]
}
diamonds <- sum(symbols == "DD")
prize <- prize * (2^diamonds)
}
score()
score(symbols)
print(score)
print(score())
print(score(symbols))
print(score(symbols))
symbols <- play()
play <- function() {
# step 1: generate symbols
symbols <- get_symbols()
# step 2: display the symbols
print(symbols)
# step 3: score the symbols
# score(symbols)
}
play <- function() {
# step 1: generate symbols
symbols <- get_symbols()
# step 2: display the symbols
print(symbols)
# step 3: score the symbols
# score(symbols)
}
play()
get_symbols <- function() {
wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")
sample(wheel, size = 3, replace = TRUE,
prob = c(0.03, 0.03, 0.06, 0.1, 0.25, 0.01, 0.52))
}
play()
score(symbols)print(score(symbols))
print(score(symbols))
symbols
symbols <- play()
print(score(symbols))
play <- function() {
# step 1: generate symbols
symbols <- get_symbols()
# step 2: display the symbols
print(symbols)
# step 3: score the symbols
score(symbols)
}
play()
play <- function() {
# step 1: generate symbols
symbols <- get_symbols()
# step 2: display the symbols
print(symbols)
# step 3: score the symbols
print(score(symbols))
}
play()
NAME <- "H15_SWAPS_Y1"
URL <- composeURL( "www.federalreserve.gov/releases/h15/data/Business_day/", NAME,".txt")
URL <-  "www.federalreserve.gov/releases/h15/data/Business_day/H15_SWAPS_Y1.txt"
Download <- readLines(URL, warn = FALSE)
URL <-  "http://research.stlouisfed.org/fred2/data/GDPC1.txt"
Download <- readLines(URL, warn = FALSE)
getSymbols("CPIAUCNS",src="FRED")
library(Quandl)
getSymbols("CPIAUCNS",src="FRED")
require(quantmod)
getSymbols("CPIAUCNS",src="FRED")
View(CPIAUCNS)
getSymbols("GDP",src="FRED")
View(GDP)
View(GDPC1)
require(PerformanceAnalytics)
require(ggplot2)
MLEmCorpSpreads<-getSymbols("BAMLEMCBPIOAS",src="FRED",auto.assign=FALSE)
View(MLEmCorpSpreads)
MLHYCorpSpreads<-getSymbols("BAMLH0A0HYM2",src="FRED",auto.assign=FALSE)
getSymbols("STLFSI",src="FRED")  #get St.Louis Fed Stress Index
spreadsStress<-na.omit(merge(MLEmCorpSpreads,MLHYCorpSpreads,STLFSI))
colnames(spreadsStress)<-c("BAC ML Emerging","BAC ML HY","St Louis Fed Stress")
chart.TimeSeries(spreadsStress,colorset=c("cadetblue","darkolivegreen3","gray70"),
legend.loc="topleft",
main="Bank of America Merrill Lynch Bond Spreads and St. Louis Fed Stress Index")
#chart changes of Spreads and Stress
spreadsStress<-na.omit(merge(momentum(MLEmCorpSpreads,5),momentum(MLHYCorpSpreads,5),momentum(STLFSI,1)))
colnames(spreadsStress)<-c("BAC ML Emerging","BAC ML HY","St Louis Fed Stress")
chart.TimeSeries(spreadsStress,colorset=c("cadetblue","darkolivegreen3","gray70"),
legend.loc="topleft",
main="Bank of America Merrill Lynch Bond Spreads and St. Louis Fed Stress Index")
#for the ggplot fans
spreadsStressDf<-data.frame(index(spreadsStress),coredata(spreadsStress))
colnames(spreadsStressDf)<-c("Date",colnames(spreadsStress))
spreadsStressDf<-melt(spreadsStressDf,id.var="Date")
colnames(spreadsStressDf)<-c("Date","Index","Value")
ggplot(spreadsStressDf, stat="identity", aes(x=Date,y=Value,colour=Index)) + geom_line() +
scale_x_date(format = "%Y") +
opts(title = "Bank of America Merrill Lynch Bond Spreads and St. Louis Fed Stress Index")
#chart correlations
chart.Correlation(spreadsStress,main="Bank of America Merrill Lynch Bond Spreads and St. Louis Fed Stress Index Correlation")
par(mfrow=c(3,1))  #3 rows and 1 column
acf(spreadsStress[,1],main=colnames(spreadsStress)[1])
acf(spreadsStress[,2],main=colnames(spreadsStress)[2])
acf(spreadsStress[,3],main=colnames(spreadsStress)[3])
corHYStress<-runCor(spreadsStress[,3],spreadsStress[,1],n=20)
View(corHYStress)
corHYStress<-runCor(spreadsStress[,3],spreadsStress[,1],n=20)
corEmStress<-runCor(spreadsStress[,3],spreadsStress[,2],n=20)
corAll<-merge(corHYStress,corEmStress)
chart.TimeSeries(corAll,main="Rolling 20 Week Correlation between Spreads and Stress",
legend.loc="topright", colorset=c("cadetblue","darkolivegreen3"))
#look at the higher moments
higherMoments<-table.HigherMoments(spreadsStress[,1:2],spreadsStress[,3])
higherMoments<-melt(cbind(rownames(higherMoments),higherMoments))
colnames(higherMoments)<-c("Moment","Index","Value")
ggplot(higherMoments, stat="identity", aes(x=Moment,y=Value,fill=Index)) +
geom_bar(position="dodge") + coord_flip() +
opts(legend.position=c(.75,0.88)) #thanks for the tip timeseriesireland
ggplot(higherMoments, stat="identity", aes(x=Moment,y=Value,fill=Index)) +
geom_bar(position="dodge") + coord_flip() +
opts(legend.position=c(.75,0.88)) #thanks for the tip timeseriesireland
#look at the higher moments
higherMoments<-table.HigherMoments(spreadsStress[,1:2],spreadsStress[,3])
higherMoments<-melt(cbind(rownames(higherMoments),higherMoments))
colnames(higherMoments)<-c("Moment","Index","Value")
ggplot(higherMoments, stat="identity", aes(x=Moment,y=Value,fill=Index)) +
geom_bar(position="dodge") + coord_flip() +
theme(legend.position=c(.75,0.88)) #thanks for the tip timeseriesireland
higherMoments<-table.HigherMoments(spreadsStress[,1:2],spreadsStress[,3])
higherMoments<-melt(cbind(rownames(higherMoments),higherMoments))
colnames(higherMoments)<-c("Moment","Index","Value")
higherMoments<-table.HigherMoments(spreadsStress[,1:2],spreadsStress[,3])
higherMoments<-melt(cbind(rownames(higherMoments),higherMoments))
spreadsStressDf
spreadsStressDf<-melt(spreadsStressDf,id.var="Date")
require(quantmod)
require(PerformanceAnalytics)
require(ggplot2)
spreadsStressDf<-melt(spreadsStressDf,id.var="Date")
spreadsStressDf
require(quantmod)
require(PerformanceAnalytics)
require(ggplot2)
#get Bank of America Merrill Lynch bond index data from St. Louis Fed
#use auto.assign = FALSE so we can use shorter names
MLEmCorpSpreads<-getSymbols("BAMLEMCBPIOAS",src="FRED",auto.assign=FALSE)
MLHYCorpSpreads<-getSymbols("BAMLH0A0HYM2",src="FRED",auto.assign=FALSE)
getSymbols("STLFSI",src="FRED")  #get St.Louis Fed Stress Index
spreadsStress<-na.omit(merge(MLEmCorpSpreads,MLHYCorpSpreads,STLFSI))
colnames(spreadsStress)<-c("BAC ML Emerging","BAC ML HY","St Louis Fed Stress")
chart.TimeSeries(spreadsStress,colorset=c("cadetblue","darkolivegreen3","gray70"),
legend.loc="topleft",
main="Bank of America Merrill Lynch Bond Spreads and St. Louis Fed Stress Index")
#chart changes of Spreads and Stress
spreadsStress<-na.omit(merge(momentum(MLEmCorpSpreads,5),momentum(MLHYCorpSpreads,5),momentum(STLFSI,1)))
colnames(spreadsStress)<-c("BAC ML Emerging","BAC ML HY","St Louis Fed Stress")
chart.TimeSeries(spreadsStress,colorset=c("cadetblue","darkolivegreen3","gray70"),
legend.loc="topleft",
main="Bank of America Merrill Lynch Bond Spreads and St. Louis Fed Stress Index")
#for the ggplot fans
spreadsStressDf<-data.frame(index(spreadsStress),coredata(spreadsStress))
colnames(spreadsStressDf)<-c("Date",colnames(spreadsStress))
spreadsStressDf<-melt(spreadsStressDf,id.var="Date")
colnames(spreadsStressDf)<-c("Date","Index","Value")
ggplot(spreadsStressDf, stat="identity", aes(x=Date,y=Value,colour=Index)) + geom_line() +
scale_x_date(format = "%Y") +
opts(title = "Bank of America Merrill Lynch Bond Spreads and St. Louis Fed Stress Index")
#chart correlations
chart.Correlation(spreadsStress,main="Bank of America Merrill Lynch Bond Spreads and St. Louis Fed Stress Index Correlation")
par(mfrow=c(3,1))  #3 rows and 1 column
acf(spreadsStress[,1],main=colnames(spreadsStress)[1])
acf(spreadsStress[,2],main=colnames(spreadsStress)[2])
acf(spreadsStress[,3],main=colnames(spreadsStress)[3])
spreadsStressDf
spreadsStressDf<-data.frame(index(spreadsStress),coredata(spreadsStress))
colnames(spreadsStressDf)<-c("Date",colnames(spreadsStress))
spreadsStressDf<-melt(spreadsStressDf,id.var="Date")
spreadsStressDf<-melt(spreadsStressDf,id.var="Date")
|Table cell  | Table cell     | Table cell        | Table cell |
title: "Test file"
help(qnorm)
qnorm(0.025, lower = FALSE)
mydata <- mtcars[, c(1,3,4,5,6,7)]
View(mydata)
cormat<-signif(cor(mydata),2)
cormat
blue
blue
col<- colorRampPalette(c("blue", "white", "red"))(20)
heatmap(cormat, col=col, symm=TRUE)
mydata
colnames(mydata)
colnames(mydata) <-c("\alpha","\beta","\gamma","\delta","\rho","\chi")
colnames(mydata) <-c("\alpha_1","\alpha_2","\alpha_3","\alpha_4","\alpha_5","\alpha_6")
cormat<-signif(cor(mydata),2)
cormat
col<- colorRampPalette(c("blue", "white", "red"))(20)
heatmap(cormat, col=col, symm=TRUE)
colnames(mydata) <-c("\alpha_1","\alpha_2","\alpha_3","\alpha_4","\alpha_5","\alpha_6")
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv
)
)
)))
")
)
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv")
nba
nba$Name <- with(nba, reorder(Name, PTS))
library(ggplot2)
nba.m <- melt(nba)
nba.m <- melt(nba)
library(dplyr2)
library(dplyr)
nba.m <- melt(nba)
library(reshape2)
nba.m <- melt(nba)
nba.m <- ddply(nba.m, .(variable), transform,rescale = rescale(value))
library(plyr)
N = .1
mat = matrix(rnorm(100*N), nrow=N, ncol=100)
colnames(mat) = paste0(&amp;amp;quot;Col&amp;amp;quot;, seq(ncol(mat)))
rownames(mat) = paste0(&amp;amp;quot;Row&amp;amp;quot;, seq(nrow(mat)))
system.time({heatmap(mat)})
mat
N = 1
mat = matrix(rnorm(100*N), nrow=N, ncol=100)
mat
colnames(mat) = paste0(&amp;amp;quot;Col&amp;amp;quot;, seq(ncol(mat)))
N = 1e4
mat = matrix(rnorm(100*N), nrow=N, ncol=100)
colnames(mat) = paste0(&amp;amp;quot;Col&amp;amp;quot;, seq(ncol(mat)))
paste0(1:12)
paste(1:12)        # same
as.character(1:12) # same
colnames(mat) = paste0(seq(ncol(mat)))
colnames
N = 1
mat = matrix(rnorm(100*N), nrow=N, ncol=100)
colnames(mat) = paste0(seq(ncol(mat)))
rownames(mat) = paste0(seq(nrow(mat)))
rownames
colnames(mat)
mat = matrix(rnorm(10*N), nrow=N, ncol=10)
colnames(mat) = paste0(seq(ncol(mat)))
rownames(mat) = paste0(seq(nrow(mat)))
system.time({heatmap(mat)})
mat = matrix(rnorm(100*N), nrow=N, ncol=100)
colnames(mat) = paste0(seq(ncol(mat)))
rownames(mat) = paste0(seq(nrow(mat)))
system.time({heatmap(mat)})
mat
mat
dim(mat)
N = 2
mat = matrix(rnorm(100*N), nrow=100, ncol=100)
colnames(mat) = paste0(seq(ncol(mat)))
rownames(mat) = paste0(seq(nrow(mat)))
system.time({heatmap(mat)})
mat = matrix(rnorm(100), nrow=10, ncol=10)
colnames(mat) = paste0(seq(ncol(mat)))
rownames(mat) = paste0(seq(nrow(mat)))
system.time({heatmap(mat)})
library(reshape2)
library(ggplot2)
system.time({
print({
g= ggplot(mat, aes(x = col, y = row, fill = value)) +
geom_tile()})
})
df = melt(mat)
system.time({
print({
g= ggplot(mat, aes(x = col, y = row, fill = value)) +
geom_tile()})
})
system.time({heatmap(mat, Rowv = NA, Colv = NA)})
labRow = c("$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$")
labRow
system.time({heatmap(mat, Rowv = NA, Colv = NA,labRow = c("$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$"),labCol=labRow = c("$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$"))})
system.time({heatmap(mat, Rowv = NA, Colv = NA,labRow = c("$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$"),labCol = c("$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$"))})
TeX('$\\alpha^\\beta$')
'$\\alpha^\\beta$$'
colnames(mat) <- c("$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$")
rownames(mat) <- c("$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$","$\alpha_1$")
system.time({heatmap(mat, Rowv = NA, Colv = NA)})
system.time({heatmap(mat, Rowv = NA, Colv = NA)})
library('ProjectTemplate')
setwd('/Users/BadWizard/Documents/OnLineClasses/coursera/ReproducibleResearch/ProjectTemplate')
setwd('my-project')
load.project()
install.packages("reshape")
load.project()
install.packages("lubridate")
load.project()
load.project()
cache('first.letter.counts')
cache('second.letter.counts')
load.project()
load.project()
source('src/generate_plots.R')
summary(cars)
plot(cars)
data("airquality")
data(airquality)
data(airquality)
View(airquality)
library(WDI)
library(countrycode)
library(reshape)
library(lattice)
library(WDI)
install.packages("WDI")
library(WDI)
library(countrycode)
install.packages("countrycode")
library(countrycode)
library(reshape)
library(lattice)
WBD <- WDI(country="all", indicator=c("NY.GNP.PCAP.CD","EG.USE.PCAP.KG.OE","SL.UEM.TOTL.ZS","SH.DYN.MORT"), start=1950, end=2013)
WBD <- rename(WBD, c(NY.GNP.PCAP.CD="gnipc"))
WBD <- rename(WBD, c(EG.USE.PCAP.KG.OE="pec"))
WBD <- rename(WBD, c(SL.UEM.TOTL.ZS="unemploymentrate"))
WBD <- rename(WBD, c(SH.DYN.MORT="cmr"))
WBD$ccode <- countrycode(WBD$iso2c, "iso2c", "cown")
WBD$ccode[WBD$iso2c == "RS"] <- 345
WBD <- subset(WBD, !is.na(ccode))
meangnipc <- mean(WBD$gnipc, na.rm = TRUE)
mediangnipc <- median(WBD$gnipc, na.rm = TRUE)
meangnipc
mediangnipc
histogram(WBD$gnipc)
WBD$log.gnipc <- log(WBD$gnipc)
meanloggnipc <- mean(WBD$log.gnipc, na.rm = TRUE)
medianloggnipc <- median(WBD$log.gnipc, na.rm = TRUE)
meanloggnipc
medianloggnipc
histogram(WBD$log.gnipc)
histogram(WBD$pec)
histogram(WBD$unemploymentrate)
WBD$log.pec <- log(WBD$pec)
WBD$log.ur <- log(WBD$unemploymentrate)
histogram(WBD$log.pec)
histogram(WBD$log.ur)
## Subset the data to just Turkmenistan (ccode == 701), Tajikistan (702), Kyrgyzstan (703), Uzbekistan (704), and Kazakhstan (705).
CAWBD <- subset(WBD, ccode >= 701 & ccode <= 705)
meancmr.ca <- mean(CAWBD$cmr, na.rm = TRUE)
mediancmr.ca <- median(CAWBD$cmr, na.rm = TRUE)
meancmr.ca
mediancmr.ca
histogram(CAWBD$cmr)
x <- rnorm(100); y <- x + rnorm(100, sd=0.5)
mean(x)
mean(y)
par(mar = c(5, 4, 1, 1), las = 1)
plot(x, y,main = "My simulated Data")
x <- rnorm(100); y <- x + rnorm(100, sd=0.5)
plot(x, y,main = "My simulated Data")
